package els

import (
	"bytes"
	"io"
	"reflect"
	"testing"

	"github.com/bluecmd/fibrechannel/common"
)

func TestFrameUnmarshalBinary(t *testing.T) {
	var tests = []struct {
		desc string
		f    *Frame
		b    []byte
		err  error
	}{
		{
			desc: "nil buffer",
			err:  io.ErrUnexpectedEOF,
		},
		{
			desc: "unsupported els frame",
			b:    append([]byte{0xff}, bytes.Repeat([]byte{1}, 1)...),
			f:    &Frame{Command: 0xff, RawPayload: []byte{1}},
		},
		{
			desc: "flogi",
			b: append([]byte{
				4, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
				0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55},
				bytes.Repeat([]byte{0}, 84)...),
			f: &Frame{
				Command: CmdFLOGI,
				Payload: &FLOGI{
					WWPN: common.WWN([8]byte{0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa}),
					WWNN: common.WWN([8]byte{0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55}),
				},
			},
		},
		{
			desc: "plogi",
			b: []byte{
				0x03, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x05,
				0x80, 0x00, 0x08, 0x00, 0x00, 0xff, 0x00, 0x1f,
				0x00, 0x00, 0x07, 0xd0, 0x21, 0x00, 0x00, 0x24,
				0xff, 0x3d, 0x39, 0xa0, 0x20, 0x00, 0x00, 0x24,
				0xff, 0x3d, 0x39, 0xa0, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x08, 0x00, 0x00, 0xff, 0x00, 0x00,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xe3, 0x1e, 0x53, 0x92,
				0x00, 0x00, 0x00, 0x00,
			},
			f: &Frame{
				Command: CmdPLOGI,
				Payload: &PLOGI{
					WWPN: common.WWN([8]byte{0x21, 0x00, 0x00, 0x24, 0xff, 0x3d, 0x39, 0xa0}),
					WWNN: common.WWN([8]byte{0x20, 0x00, 0x00, 0x24, 0xff, 0x3d, 0x39, 0xa0}),
				},
			},
		},
		{
			desc: "prli",
			b: []byte{
				0x20, 0x10, 0x00, 0x14, 0x08, 0x00, 0x20, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x07, 0xa2, 0x8d, 0xd6, 0x46, 0xce,
			},
			f: &Frame{
				Command: CmdPRLI,
				Payload: &PRLI{
					PagesLength:   0x10,
					PayloadLength: 20,
					ServiceParameters: []ServiceParameter{
						ServiceParameter{
							Type: 8,
						},
					},
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.desc, func(t *testing.T) {
			c := &Frame{}
			if _, err := c.ReadFrom(bytes.NewReader(tt.b)); err != nil || tt.err != nil {
				if want, got := tt.err, err; want != got {
					t.Fatalf("unexpected error: %v != %v", want, got)
				}
				return
			}
			if want, got := tt.f.Command, c.Command; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected command:\n- want: %v\n-  got: %v", want, got)
			}
			if tt.f.Payload != nil {
				if want, got := tt.f.Payload, c.Payload; !reflect.DeepEqual(want, got) {
					t.Fatalf("unexpected payload:\n- want: %+v\n-  got: %+v", want, got)
				}
			} else {
				if want, got := tt.f.RawPayload, c.RawPayload; !reflect.DeepEqual(want, got) {
					t.Fatalf("unexpected raw payload:\n- want: %v\n-  got: %v", want, got)
				}
			}
		})
	}
}
