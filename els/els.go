// Generated by Fibre Channel protocol generator
// Any manual changes will be lost

package els

import (
	"fmt"
	"io"

	"github.com/bluecmd/fibrechannel/common"
	"github.com/bluecmd/fibrechannel/encoding"
)

const (
	CmdLSRJT     = 0x1  // ESL reject
	CmdLSACC     = 0x2  // ESL Accept
	CmdPLOGI     = 0x3  // N_Port login
	CmdFLOGI     = 0x4  // F_Port login
	CmdLOGO      = 0x5  // Logout
	CmdABTX      = 0x6  // Abort exchange - obsolete
	CmdRCS       = 0x7  // read connection status
	CmdRES       = 0x8  // read exchange status block
	CmdRSS       = 0x9  // read sequence status block
	CmdRSI       = 0xa  // read sequence initiative
	CmdESTS      = 0xb  // establish streaming
	CmdESTC      = 0xc  // estimate credit
	CmdADVC      = 0xd  // advise credit
	CmdRTV       = 0xe  // read timeout value
	CmdRLS       = 0xf  // read link error status block
	CmdEcho      = 0x10 // echo
	CmdTest      = 0x11 // test
	CmdRRQ       = 0x12 // reinstate recovery qualifier
	CmdREC       = 0x13 // read exchange concise
	CmdSRR       = 0x14 // sequence retransmission request
	CmdPRLI      = 0x20 // process login
	CmdPRLO      = 0x21 // process logout
	CmdSCN       = 0x22 // state change notification
	CmdTPLS      = 0x23 // test process login state
	CmdTPRLO     = 0x24 // third party process logout
	CmdLCLM      = 0x25 // login control list mgmt (obs)
	CmdGAID      = 0x30 // get alias_ID
	CmdFACT      = 0x31 // fabric activate alias_id
	CmdFDACDT    = 0x32 // fabric deactivate alias_id
	CmdNACT      = 0x33 // N-port activate alias_id
	CmdNDACT     = 0x34 // N-port deactivate alias_id
	CmdQOSR      = 0x40 // quality of service request
	CmdRVCS      = 0x41 // read virtual circuit status
	CmdPDISC     = 0x50 // discover N_port service params
	CmdFDISC     = 0x51 // discover F_port service params
	CmdADISC     = 0x52 // discover address
	CmdRNC       = 0x53 // report node cap (obs)
	CmdFARPReq   = 0x54 // FC ARP request
	CmdFARPReply = 0x55 // FC ARP reply
	CmdRPS       = 0x56 // read port status block
	CmdRPL       = 0x57 // read port list
	CmdRPBC      = 0x58 // read port buffer condition
	CmdFAN       = 0x60 // fabric address notification
	CmdRSCN      = 0x61 // registered state change notification
	CmdSCR       = 0x62 // state change registration
	CmdRNFT      = 0x63 // report node FC-4 types
	CmdCSR       = 0x68 // clock synch. request
	CmdCSU       = 0x69 // clock synch. update
	CmdLInit     = 0x70 // loop initialize
	CmdLSTS      = 0x72 // loop status
	CmdRNID      = 0x78 // request node ID data
	CmdRLIR      = 0x79 // registered link incident report
	CmdLIRR      = 0x7a // link incident record registration
	CmdSRL       = 0x7b // scan remote loop
	CmdSBRP      = 0x7c // set bit-error reporting params
	CmdRPSC      = 0x7d // report speed capabilities
	CmdQSA       = 0x7e // query security attributes
	CmdEVFP      = 0x7f // exchange virt. fabrics params
	CmdLKA       = 0x80 // link keep-alive
	CmdAuthELS   = 0x90 // authentication ELS

	RouteSolicited = 0x21 // Solicited ELS
	RouteRequest   = 0x22 // ELS Request
	RouteReply     = 0x23 // ELS Reply
)

type Command uint8

type Frame struct {
	cmd     Command
	Payload interface{}
}

type PLOGI struct {
	CommonSvcParams PLOGICommonSvcParams
	PortName        common.WWN
	NodeName        common.WWN
	ClassSvcParams  [3]PLOGIClassSvcParams
	AuxSvcParams    PLOGIClassSvcParams
	VendorVersion   [16]byte
}

type PLOGIClassSvcParams struct {
	Service              uint16
	Initiator            uint16
	Recipient            uint16
	ReceiveDataFieldSize uint16
	ConcurrentSeq        uint8
	E2ECredits           uint16
	OpenSeqPerExch       uint8
}

type PLOGICommonSvcParams struct {
	FCPHVersion                int
	B2BCredits                 int
	ContIncrRelOffset          bool
	RandomRelOffset            bool
	ValidVendorVersionLevel    bool
	NorFPort                   bool
	BBCreditMgmt               bool
	EDTOVResolution            bool
	EnergyEffLPIModeSupported  bool
	PriorityTaggingSupported   bool
	QueryDataBufferCond        bool
	SecurityBit                bool
	ClockSyncPrimitiveCapable  bool
	RTTOVValue                 bool
	DynamicHalfDuplexSupported bool
	SeqCntVendorSpec           bool
	PayloadBit                 bool
	BBSCN                      int
	B2BRecvDataFieldSize       int
	AppHdrSupport              bool
	NxPortTotalConcurrentSeq   int
	RelOffsetInfoCat           int
	EDTOV                      int
}

type Route uint8

func (o *Command) String() string {
	switch *o {
	case 0x1:
		return "CmdLSRJT <0x1> (ESL reject)"
	case 0x2:
		return "CmdLSACC <0x2> (ESL Accept)"
	case 0x3:
		return "CmdPLOGI <0x3> (N_Port login)"
	case 0x4:
		return "CmdFLOGI <0x4> (F_Port login)"
	case 0x5:
		return "CmdLOGO <0x5> (Logout)"
	case 0x6:
		return "CmdABTX <0x6> (Abort exchange - obsolete)"
	case 0x7:
		return "CmdRCS <0x7> (read connection status)"
	case 0x8:
		return "CmdRES <0x8> (read exchange status block)"
	case 0x9:
		return "CmdRSS <0x9> (read sequence status block)"
	case 0xa:
		return "CmdRSI <0xa> (read sequence initiative)"
	case 0xb:
		return "CmdESTS <0xb> (establish streaming)"
	case 0xc:
		return "CmdESTC <0xc> (estimate credit)"
	case 0xd:
		return "CmdADVC <0xd> (advise credit)"
	case 0xe:
		return "CmdRTV <0xe> (read timeout value)"
	case 0xf:
		return "CmdRLS <0xf> (read link error status block)"
	case 0x10:
		return "CmdEcho <0x10> (echo)"
	case 0x11:
		return "CmdTest <0x11> (test)"
	case 0x12:
		return "CmdRRQ <0x12> (reinstate recovery qualifier)"
	case 0x13:
		return "CmdREC <0x13> (read exchange concise)"
	case 0x14:
		return "CmdSRR <0x14> (sequence retransmission request)"
	case 0x20:
		return "CmdPRLI <0x20> (process login)"
	case 0x21:
		return "CmdPRLO <0x21> (process logout)"
	case 0x22:
		return "CmdSCN <0x22> (state change notification)"
	case 0x23:
		return "CmdTPLS <0x23> (test process login state)"
	case 0x24:
		return "CmdTPRLO <0x24> (third party process logout)"
	case 0x25:
		return "CmdLCLM <0x25> (login control list mgmt (obs))"
	case 0x30:
		return "CmdGAID <0x30> (get alias_ID)"
	case 0x31:
		return "CmdFACT <0x31> (fabric activate alias_id)"
	case 0x32:
		return "CmdFDACDT <0x32> (fabric deactivate alias_id)"
	case 0x33:
		return "CmdNACT <0x33> (N-port activate alias_id)"
	case 0x34:
		return "CmdNDACT <0x34> (N-port deactivate alias_id)"
	case 0x40:
		return "CmdQOSR <0x40> (quality of service request)"
	case 0x41:
		return "CmdRVCS <0x41> (read virtual circuit status)"
	case 0x50:
		return "CmdPDISC <0x50> (discover N_port service params)"
	case 0x51:
		return "CmdFDISC <0x51> (discover F_port service params)"
	case 0x52:
		return "CmdADISC <0x52> (discover address)"
	case 0x53:
		return "CmdRNC <0x53> (report node cap (obs))"
	case 0x54:
		return "CmdFARPReq <0x54> (FC ARP request)"
	case 0x55:
		return "CmdFARPReply <0x55> (FC ARP reply)"
	case 0x56:
		return "CmdRPS <0x56> (read port status block)"
	case 0x57:
		return "CmdRPL <0x57> (read port list)"
	case 0x58:
		return "CmdRPBC <0x58> (read port buffer condition)"
	case 0x60:
		return "CmdFAN <0x60> (fabric address notification)"
	case 0x61:
		return "CmdRSCN <0x61> (registered state change notification)"
	case 0x62:
		return "CmdSCR <0x62> (state change registration)"
	case 0x63:
		return "CmdRNFT <0x63> (report node FC-4 types)"
	case 0x68:
		return "CmdCSR <0x68> (clock synch. request)"
	case 0x69:
		return "CmdCSU <0x69> (clock synch. update)"
	case 0x70:
		return "CmdLInit <0x70> (loop initialize)"
	case 0x72:
		return "CmdLSTS <0x72> (loop status)"
	case 0x78:
		return "CmdRNID <0x78> (request node ID data)"
	case 0x79:
		return "CmdRLIR <0x79> (registered link incident report)"
	case 0x7a:
		return "CmdLIRR <0x7a> (link incident record registration)"
	case 0x7b:
		return "CmdSRL <0x7b> (scan remote loop)"
	case 0x7c:
		return "CmdSBRP <0x7c> (set bit-error reporting params)"
	case 0x7d:
		return "CmdRPSC <0x7d> (report speed capabilities)"
	case 0x7e:
		return "CmdQSA <0x7e> (query security attributes)"
	case 0x7f:
		return "CmdEVFP <0x7f> (exchange virt. fabrics params)"
	case 0x80:
		return "CmdLKA <0x80> (link keep-alive)"
	case 0x90:
		return "CmdAuthELS <0x90> (authentication ELS)"
	default:
		return fmt.Sprintf("--Invalid Enum Value-- <0x%x>", *o)
	}
}

func (o *Frame) ReadFrom(r io.Reader) (int64, error) {
	_io := encoding.Reader{R: r}
	_io.ReadObject(&o.cmd)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	switch o.cmd {
	case CmdPLOGI:
		i := &PLOGI{}
		if n, err := i.ReadFrom(&_io); err != nil {
			return n, err
		}
		o.Payload = i
	}

	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *Frame) WriteTo(w io.Writer) (int64, error) {
	_io := encoding.Writer{W: w}
	switch o.Payload.(type) {
	case PLOGI:
		o.cmd = CmdPLOGI
	}

	_io.WriteObject(o.cmd)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	switch i := o.Payload.(type) {
	case *PLOGI:
		if n, err := i.WriteTo(&_io); err != nil {
			return n, err
		}
	default:
		return _io.Pos, fmt.Errorf("Unsupported type %v", i)
	}

	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *PLOGI) ReadFrom(r io.Reader) (int64, error) {
	_io := encoding.Reader{R: r}
	_io.Skip(3)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	{
		var bs [16]byte
		_io.Read(bs[:])
		if _io.Error != nil {
			return _io.Pos, _io.Error
		}
		o.CommonSvcParams.FCPHVersion = (0 | int(bs[0]&0xff)<<8 | int(bs[1]&0xff))
		o.CommonSvcParams.B2BCredits = (0 | int(bs[2]&0xff)<<8 | int(bs[3]&0xff))
		o.CommonSvcParams.ContIncrRelOffset = (0 | int(bs[4]&0x80)) == 0x80
		o.CommonSvcParams.RandomRelOffset = (0 | int(bs[4]&0x40)) == 0x40
		o.CommonSvcParams.ValidVendorVersionLevel = (0 | int(bs[4]&0x20)) == 0x20
		o.CommonSvcParams.NorFPort = (0 | int(bs[4]&0x10)) == 0x10
		o.CommonSvcParams.BBCreditMgmt = (0 | int(bs[4]&0x8)) == 0x8
		o.CommonSvcParams.EDTOVResolution = (0 | int(bs[4]&0x4)) == 0x4
		o.CommonSvcParams.EnergyEffLPIModeSupported = (0 | int(bs[4]&0x2)) == 0x2
		o.CommonSvcParams.PriorityTaggingSupported = (0 | int(bs[5]&0x80)) == 0x80
		o.CommonSvcParams.QueryDataBufferCond = (0 | int(bs[5]&0x40)) == 0x40
		o.CommonSvcParams.SecurityBit = (0 | int(bs[5]&0x20)) == 0x20
		o.CommonSvcParams.ClockSyncPrimitiveCapable = (0 | int(bs[5]&0x10)) == 0x10
		o.CommonSvcParams.RTTOVValue = (0 | int(bs[5]&0x8)) == 0x8
		o.CommonSvcParams.DynamicHalfDuplexSupported = (0 | int(bs[5]&0x4)) == 0x4
		o.CommonSvcParams.SeqCntVendorSpec = (0 | int(bs[5]&0x2)) == 0x2
		o.CommonSvcParams.PayloadBit = (0 | int(bs[5]&0x1)) == 0x1
		o.CommonSvcParams.BBSCN = ((0 | int(bs[6]&0xf0)) >> 4)
		o.CommonSvcParams.B2BRecvDataFieldSize = (0 | int(bs[6]&0xf)<<8 | int(bs[7]&0xff))
		o.CommonSvcParams.AppHdrSupport = (0 | int(bs[8]&0x4)) == 0x4
		o.CommonSvcParams.NxPortTotalConcurrentSeq = (0 | int(bs[9]&0xff))
		o.CommonSvcParams.RelOffsetInfoCat = (0 | int(bs[10]&0xff)<<8 | int(bs[11]&0xff))
		o.CommonSvcParams.EDTOV = (0 | int(bs[12]&0xff)<<24 | int(bs[13]&0xff)<<16 | int(bs[14]&0xff)<<8 | int(bs[15]&0xff))
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	if n, err := o.PortName.ReadFrom(&_io); err != nil {
		return n, err
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	if n, err := o.NodeName.ReadFrom(&_io); err != nil {
		return n, err
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[0].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[1].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ClassSvcParams[2].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.AuxSvcParams.OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.VendorVersion)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *PLOGI) WriteTo(w io.Writer) (int64, error) {
	_io := encoding.Writer{W: w}
	_io.Skip(3)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	{
		var bs [16]byte
		bool2int := func(v bool) int {
			if v {
				return 1
			}
			return 0
		}
		bs[0] = byte(0 | ((int(o.CommonSvcParams.FCPHVersion))>>8)&0xff)
		bs[1] = byte(0 | (int(o.CommonSvcParams.FCPHVersion))&0xff)
		bs[2] = byte(0 | ((int(o.CommonSvcParams.B2BCredits))>>8)&0xff)
		bs[3] = byte(0 | (int(o.CommonSvcParams.B2BCredits))&0xff)
		bs[4] = byte(0 | (bool2int(o.CommonSvcParams.ContIncrRelOffset)<<7)&0x80 | (bool2int(o.CommonSvcParams.RandomRelOffset)<<6)&0x40 | (bool2int(o.CommonSvcParams.ValidVendorVersionLevel)<<5)&0x20 | (bool2int(o.CommonSvcParams.NorFPort)<<4)&0x10 | (bool2int(o.CommonSvcParams.BBCreditMgmt)<<3)&0x8 | (bool2int(o.CommonSvcParams.EDTOVResolution)<<2)&0x4 | (bool2int(o.CommonSvcParams.EnergyEffLPIModeSupported)<<1)&0x2)
		bs[5] = byte(0 | (bool2int(o.CommonSvcParams.PriorityTaggingSupported)<<7)&0x80 | (bool2int(o.CommonSvcParams.QueryDataBufferCond)<<6)&0x40 | (bool2int(o.CommonSvcParams.SecurityBit)<<5)&0x20 | (bool2int(o.CommonSvcParams.ClockSyncPrimitiveCapable)<<4)&0x10 | (bool2int(o.CommonSvcParams.RTTOVValue)<<3)&0x8 | (bool2int(o.CommonSvcParams.DynamicHalfDuplexSupported)<<2)&0x4 | (bool2int(o.CommonSvcParams.SeqCntVendorSpec)<<1)&0x2 | (bool2int(o.CommonSvcParams.PayloadBit))&0x1)
		bs[6] = byte(0 | (int(o.CommonSvcParams.BBSCN)<<4)&0xf0 | ((int(o.CommonSvcParams.B2BRecvDataFieldSize))>>8)&0xf)
		bs[7] = byte(0 | (int(o.CommonSvcParams.B2BRecvDataFieldSize))&0xff)
		bs[8] = byte(0 | (bool2int(o.CommonSvcParams.AppHdrSupport)<<2)&0x4)
		bs[9] = byte(0 | (int(o.CommonSvcParams.NxPortTotalConcurrentSeq))&0xff)
		bs[10] = byte(0 | ((int(o.CommonSvcParams.RelOffsetInfoCat))>>8)&0xff)
		bs[11] = byte(0 | (int(o.CommonSvcParams.RelOffsetInfoCat))&0xff)
		bs[12] = byte(0 | ((int(o.CommonSvcParams.EDTOV))>>24)&0xff)
		bs[13] = byte(0 | ((int(o.CommonSvcParams.EDTOV))>>16)&0xff)
		bs[14] = byte(0 | ((int(o.CommonSvcParams.EDTOV))>>8)&0xff)
		bs[15] = byte(0 | (int(o.CommonSvcParams.EDTOV))&0xff)
		_io.Write(bs[:])
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	if n, err := o.PortName.WriteTo(&_io); err != nil {
		return n, err
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	if n, err := o.NodeName.WriteTo(&_io); err != nil {
		return n, err
	}
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[0].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[1].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ClassSvcParams[2].OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.AuxSvcParams.OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.VendorVersion)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *PLOGIClassSvcParams) ReadFrom(r io.Reader) (int64, error) {
	_io := encoding.Reader{R: r}
	_io.ReadObject(&o.Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.ReadObject(&o.OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *PLOGIClassSvcParams) WriteTo(w io.Writer) (int64, error) {
	_io := encoding.Writer{W: w}
	_io.WriteObject(o.Service)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.Initiator)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.Recipient)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ReceiveDataFieldSize)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.ConcurrentSeq)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.E2ECredits)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(1)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.WriteObject(o.OpenSeqPerExch)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	_io.Skip(2)
	if _io.Error != nil {
		return _io.Pos, _io.Error
	}
	return _io.Pos, nil
}

func (o *Route) String() string {
	switch *o {
	case 0x21:
		return "RouteSolicited <0x21> (Solicited ELS)"
	case 0x22:
		return "RouteRequest <0x22> (ELS Request)"
	case 0x23:
		return "RouteReply <0x23> (ELS Reply)"
	default:
		return fmt.Sprintf("--Invalid Enum Value-- <0x%x>", *o)
	}
}
